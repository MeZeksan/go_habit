import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:go_habit/feature/categories/domain/models/habit_category.dart';
import 'package:go_habit/feature/habits/data/models/habit.dart';

/// –ú–æ–∫-–≤–µ—Ä—Å–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π BLoC –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockHabitCard extends StatelessWidget {
  final Habit habit;
  final HabitCategory habitCategory;

  const MockHabitCard({
    required this.habit,
    required this.habitCategory,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    final cardColor =
        Color(int.parse(habitCategory.color.replaceAll('#', '0xFF')));
    final isActive = habit.isActive;

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.transparent.withOpacity(0.12),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: isActive ? Colors.transparent : Colors.grey.withOpacity(0.5),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.black87.withOpacity(0.5),
                  shape: BoxShape.circle,
                ),
                child: Text(
                  habit.icon ?? '',
                  style: TextStyle(
                    fontSize: 48,
                    color: isActive ? Colors.white : Colors.grey,
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(
                      habit.title,
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w600,
                        color: isActive ? Colors.white : Colors.grey,
                        decoration:
                            isActive ? null : TextDecoration.lineThrough,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      habit.description ?? '',
                      style: TextStyle(
                        fontSize: 14,
                        color: isActive ? Colors.white : Colors.grey,
                      ),
                    ),
                  ],
                ),
              ),
              if (isActive)
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: DateTime.now()
                                .difference(DateTime.parse(
                                    habit.lastCompletedTime ??
                                        '2023-03-31T00:00:00.000'))
                                .inDays ==
                            0
                        ? Colors.grey
                        : cardColor,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Icon(Icons.check, color: Colors.black),
                ),
            ],
          ),
          const SizedBox(height: 12),
          SizedBox(
            height: 70,
            child: isActive
                ? Container(
                    alignment: Alignment.center,
                    child: Text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏: ${habit.title}'),
                  )
                : Container(
                    alignment: Alignment.center,
                    child: const Text(
                      '–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞',
                      style: TextStyle(
                        color: Colors.grey,
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                  ),
          ),
          const SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Container(
                padding:
                    const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                decoration: BoxDecoration(
                  color: cardColor.withOpacity(isActive ? 1.0 : 0.5),
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Row(
                  children: [
                    Icon(
                      getCategoryIcon(habitCategory.id),
                      color: isActive ? Colors.white : Colors.grey,
                    ),
                    const SizedBox(width: 6),
                    Text(
                      habitCategory.name,
                      style: TextStyle(
                        color: isActive ? Colors.white : Colors.grey,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
              Switch(
                value: habit.isActive,
                onChanged: (_) {},
                activeColor: cardColor,
                inactiveThumbColor: Colors.grey,
              ),
            ],
          ),
        ],
      ),
    );
  }
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
IconData getCategoryIcon(String categoryId) {
  switch (categoryId) {
    case 'art':
      return Icons.brush; // –ò–∫–æ–Ω–∫–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞
    case 'education':
      return Icons.school; // –ò–∫–æ–Ω–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    case 'health':
      return Icons.fitness_center; // –ò–∫–æ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    case 'money':
      return Icons.attach_money; // –ò–∫–æ–Ω–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    case 'selv-development':
      return Icons.self_improvement; // –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ
    case 'sport':
      return Icons.sports_soccer; // –ò–∫–æ–Ω–∫–∞ —Å–ø–æ—Ä—Ç–∞
    case 'work':
      return Icons.work; // –ò–∫–æ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã
    default:
      return Icons.category; // –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }
}

/// Golden —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏.
///
/// –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/// ```
/// flutter test --update-goldens test/widget/habits/habit_card_mock_test.dart
/// ```
///
/// –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–Ω–∏–º–∫–∞–º:
/// ```
/// flutter test test/widget/habits/habit_card_mock_test.dart
/// ```
void main() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  TestWidgetsFlutterBinding.ensureInitialized();

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —ç–∫—Ä–∞–Ω–æ–≤
  const testSize = Size(400, 300);

  testWidgets('HabitCard renders correctly - active habit', (tester) async {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    tester.binding.window.physicalSizeTestValue = testSize;
    tester.binding.window.devicePixelRatioTestValue = 1.0;

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    final habit = Habit(
      id: 'test-habit-1',
      title: '–ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É',
      description: '30 –º–∏–Ω—É—Ç —á—Ç–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
      categoryId: 'education',
      icon: 'üìö',
      lastCompletedTime:
          DateTime.now().subtract(const Duration(days: 1)).toIso8601String(),
    );

    final category = HabitCategory(
      id: 'education',
      name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      color: '#4A90E2',
    );

    // –†–µ–Ω–¥–µ—Ä–∏–º –≤–∏–¥–∂–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º MaterialApp –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await tester.pumpWidget(
      MaterialApp(
        theme: ThemeData.dark(),
        home: Scaffold(
          body: Center(
            child: MockHabitCard(
              habit: habit,
              habitCategory: category,
            ),
          ),
        ),
      ),
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    expect(find.text('–ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É'), findsOneWidget);
    expect(find.text('30 –º–∏–Ω—É—Ç —á—Ç–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'), findsOneWidget);
    expect(find.text('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'), findsOneWidget);
    expect(find.text('üìö'), findsOneWidget);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    await expectLater(
      find.byType(MockHabitCard),
      matchesGoldenFile('golden/habit_card_active.png'),
    );

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    addTearDown(tester.binding.window.clearPhysicalSizeTestValue);
  });

  testWidgets('HabitCard renders correctly - inactive habit', (tester) async {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    tester.binding.window.physicalSizeTestValue = testSize;
    tester.binding.window.devicePixelRatioTestValue = 1.0;

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    final habit = Habit(
      id: 'test-habit-2',
      title: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è',
      description: '10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏',
      categoryId: 'selv-development',
      isActive: false,
      icon: 'üßò',
      lastCompletedTime:
          DateTime.now().subtract(const Duration(days: 2)).toIso8601String(),
    );

    final category = HabitCategory(
      id: 'selv-development',
      name: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ',
      color: '#9B59B6',
    );

    // –†–µ–Ω–¥–µ—Ä–∏–º –≤–∏–¥–∂–µ—Ç
    await tester.pumpWidget(
      MaterialApp(
        theme: ThemeData.dark(),
        home: Scaffold(
          body: Center(
            child: MockHabitCard(
              habit: habit,
              habitCategory: category,
            ),
          ),
        ),
      ),
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    expect(find.text('–ú–µ–¥–∏—Ç–∞—Ü–∏—è'), findsOneWidget);
    expect(find.text('10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏'), findsOneWidget);
    expect(find.text('–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ'), findsOneWidget);
    expect(find.text('üßò'), findsOneWidget);
    expect(find.text('–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'), findsOneWidget);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    await expectLater(
      find.byType(MockHabitCard),
      matchesGoldenFile('golden/habit_card_inactive.png'),
    );

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    addTearDown(tester.binding.window.clearPhysicalSizeTestValue);
  });

  testWidgets('HabitCard renders correctly - habit completed today',
      (tester) async {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    tester.binding.window.physicalSizeTestValue = testSize;
    tester.binding.window.devicePixelRatioTestValue = 1.0;

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–µ–≥–æ–¥–Ω—è
    final habit = Habit(
      id: 'test-habit-3',
      title: '–ü—Ä–æ–±–µ–∂–∫–∞',
      description: '5 –∫–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
      categoryId: 'sport',
      icon: 'üèÉ',
      lastCompletedTime:
          DateTime.now().toIso8601String(), // –ü—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    );

    final category = HabitCategory(
      id: 'sport',
      name: '–°–ø–æ—Ä—Ç',
      color: '#E74C3C',
    );

    // –†–µ–Ω–¥–µ—Ä–∏–º –≤–∏–¥–∂–µ—Ç
    await tester.pumpWidget(
      MaterialApp(
        theme: ThemeData.dark(),
        home: Scaffold(
          body: Center(
            child: MockHabitCard(
              habit: habit,
              habitCategory: category,
            ),
          ),
        ),
      ),
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    expect(find.text('–ü—Ä–æ–±–µ–∂–∫–∞'), findsOneWidget);
    expect(find.text('5 –∫–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'), findsOneWidget);
    expect(find.text('–°–ø–æ—Ä—Ç'), findsOneWidget);
    expect(find.text('üèÉ'), findsOneWidget);
    expect(find.text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏: –ü—Ä–æ–±–µ–∂–∫–∞'), findsOneWidget);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    await expectLater(
      find.byType(MockHabitCard),
      matchesGoldenFile('golden/habit_card_completed_today.png'),
    );

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    addTearDown(tester.binding.window.clearPhysicalSizeTestValue);
  });
}
