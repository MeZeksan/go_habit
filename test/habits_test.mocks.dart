// Mocks generated by Mockito 5.4.5 from annotations
// in go_habit/test/habits_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:drift/drift.dart' as _i3;
import 'package:drift/src/runtime/executor/stream_queries.dart' as _i4;
import 'package:go_habit/core/app_connect/src/app_connect.dart' as _i12;
import 'package:go_habit/core/database/dao/habits_dao.dart' as _i7;
import 'package:go_habit/core/database/drift_database.dart' as _i2;
import 'package:go_habit/feature/habits/data/data_sources/local/local_habit_data_source.dart'
    as _i10;
import 'package:go_habit/feature/habits/data/data_sources/remote/remote_habit_data_source.dart'
    as _i9;
import 'package:go_habit/feature/habits/data/models/habit.dart' as _i6;
import 'package:go_habit/feature/habits/domain/enums/sync_status.dart' as _i11;
import 'package:go_habit/feature/habits/domain/repositories/habit_repository.dart'
    as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppDatabase_0 extends _i1.SmartFake implements _i2.AppDatabase {
  _FakeAppDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseConnection_1 extends _i1.SmartFake
    implements _i3.DatabaseConnection {
  _FakeDatabaseConnection_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDriftDatabaseOptions_2 extends _i1.SmartFake
    implements _i3.DriftDatabaseOptions {
  _FakeDriftDatabaseOptions_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryExecutor_3 extends _i1.SmartFake implements _i3.QueryExecutor {
  _FakeQueryExecutor_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamQueryStore_4 extends _i1.SmartFake
    implements _i4.StreamQueryStore {
  _FakeStreamQueryStore_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseConnectionUser_5 extends _i1.SmartFake
    implements _i3.DatabaseConnectionUser {
  _FakeDatabaseConnectionUser_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$HabitCategoriesTable_6 extends _i1.SmartFake
    implements _i2.$HabitCategoriesTable {
  _Fake$HabitCategoriesTable_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$HabitsTable_7 extends _i1.SmartFake implements _i2.$HabitsTable {
  _Fake$HabitsTable_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_8<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInsertStatement_9<T1 extends _i3.Table, D1> extends _i1.SmartFake
    implements _i3.InsertStatement<T1, D1> {
  _FakeInsertStatement_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateStatement_10<T extends _i3.Table, D> extends _i1.SmartFake
    implements _i3.UpdateStatement<T, D> {
  _FakeUpdateStatement_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSimpleSelectStatement_11<T1 extends _i3.HasResultSet, D>
    extends _i1.SmartFake implements _i3.SimpleSelectStatement<T1, D> {
  _FakeSimpleSelectStatement_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJoinedSelectStatement_12<FirstT extends _i3.HasResultSet, FirstD>
    extends _i1.SmartFake implements _i3.JoinedSelectStatement<FirstT, FirstD> {
  _FakeJoinedSelectStatement_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseSelectStatement_13<Row> extends _i1.SmartFake
    implements _i3.BaseSelectStatement<Row> {
  _FakeBaseSelectStatement_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteStatement_14<T1 extends _i3.Table, D1> extends _i1.SmartFake
    implements _i3.DeleteStatement<T1, D1> {
  _FakeDeleteStatement_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSelectable_15<T> extends _i1.SmartFake implements _i3.Selectable<T> {
  _FakeSelectable_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGenerationContext_16 extends _i1.SmartFake
    implements _i3.GenerationContext {
  _FakeGenerationContext_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHabit_17 extends _i1.SmartFake implements _i6.Habit {
  _FakeHabit_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HabitsDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockHabitsDao extends _i1.Mock implements _i7.HabitsDao {
  @override
  _i2.AppDatabase get attachedDatabase => (super.noSuchMethod(
        Invocation.getter(#attachedDatabase),
        returnValue: _FakeAppDatabase_0(
          this,
          Invocation.getter(#attachedDatabase),
        ),
        returnValueForMissingStub: _FakeAppDatabase_0(
          this,
          Invocation.getter(#attachedDatabase),
        ),
      ) as _i2.AppDatabase);

  @override
  _i3.DatabaseConnection get connection => (super.noSuchMethod(
        Invocation.getter(#connection),
        returnValue: _FakeDatabaseConnection_1(
          this,
          Invocation.getter(#connection),
        ),
        returnValueForMissingStub: _FakeDatabaseConnection_1(
          this,
          Invocation.getter(#connection),
        ),
      ) as _i3.DatabaseConnection);

  @override
  _i3.SqlTypes get typeMapping => (super.noSuchMethod(
        Invocation.getter(#typeMapping),
        returnValue: _i8.dummyValue<_i3.SqlTypes>(
          this,
          Invocation.getter(#typeMapping),
        ),
        returnValueForMissingStub: _i8.dummyValue<_i3.SqlTypes>(
          this,
          Invocation.getter(#typeMapping),
        ),
      ) as _i3.SqlTypes);

  @override
  _i3.DriftDatabaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeDriftDatabaseOptions_2(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeDriftDatabaseOptions_2(
          this,
          Invocation.getter(#options),
        ),
      ) as _i3.DriftDatabaseOptions);

  @override
  _i3.QueryExecutor get executor => (super.noSuchMethod(
        Invocation.getter(#executor),
        returnValue: _FakeQueryExecutor_3(
          this,
          Invocation.getter(#executor),
        ),
        returnValueForMissingStub: _FakeQueryExecutor_3(
          this,
          Invocation.getter(#executor),
        ),
      ) as _i3.QueryExecutor);

  @override
  _i4.StreamQueryStore get streamQueries => (super.noSuchMethod(
        Invocation.getter(#streamQueries),
        returnValue: _FakeStreamQueryStore_4(
          this,
          Invocation.getter(#streamQueries),
        ),
        returnValueForMissingStub: _FakeStreamQueryStore_4(
          this,
          Invocation.getter(#streamQueries),
        ),
      ) as _i4.StreamQueryStore);

  @override
  _i3.DatabaseConnectionUser get resolvedEngine => (super.noSuchMethod(
        Invocation.getter(#resolvedEngine),
        returnValue: _FakeDatabaseConnectionUser_5(
          this,
          Invocation.getter(#resolvedEngine),
        ),
        returnValueForMissingStub: _FakeDatabaseConnectionUser_5(
          this,
          Invocation.getter(#resolvedEngine),
        ),
      ) as _i3.DatabaseConnectionUser);

  @override
  _i2.$HabitCategoriesTable get habitCategories => (super.noSuchMethod(
        Invocation.getter(#habitCategories),
        returnValue: _Fake$HabitCategoriesTable_6(
          this,
          Invocation.getter(#habitCategories),
        ),
        returnValueForMissingStub: _Fake$HabitCategoriesTable_6(
          this,
          Invocation.getter(#habitCategories),
        ),
      ) as _i2.$HabitCategoriesTable);

  @override
  _i2.$HabitsTable get habits => (super.noSuchMethod(
        Invocation.getter(#habits),
        returnValue: _Fake$HabitsTable_7(
          this,
          Invocation.getter(#habits),
        ),
        returnValueForMissingStub: _Fake$HabitsTable_7(
          this,
          Invocation.getter(#habits),
        ),
      ) as _i2.$HabitsTable);

  @override
  _i5.Future<List<_i2.Habit>> getAllHabits() => (super.noSuchMethod(
        Invocation.method(
          #getAllHabits,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Habit>>.value(<_i2.Habit>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.Habit>>.value(<_i2.Habit>[]),
      ) as _i5.Future<List<_i2.Habit>>);

  @override
  _i5.Future<_i2.Habit?> getHabitById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getHabitById,
          [id],
        ),
        returnValue: _i5.Future<_i2.Habit?>.value(),
        returnValueForMissingStub: _i5.Future<_i2.Habit?>.value(),
      ) as _i5.Future<_i2.Habit?>);

  @override
  _i5.Future<int> addHabit(_i2.HabitsCompanion? entry) => (super.noSuchMethod(
        Invocation.method(
          #addHabit,
          [entry],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> updateHabit(
    String? habitId, {
    String? title,
    String? description,
    String? categoryId,
    int? steps,
    bool? isActive,
    DateTime? lastTimeCompleted,
    String? syncStatus,
    bool? isPendingSync,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateHabit,
          [habitId],
          {
            #title: title,
            #description: description,
            #categoryId: categoryId,
            #steps: steps,
            #isActive: isActive,
            #lastTimeCompleted: lastTimeCompleted,
            #syncStatus: syncStatus,
            #isPendingSync: isPendingSync,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Stream<List<_i2.Habit>> watchHabits() => (super.noSuchMethod(
        Invocation.method(
          #watchHabits,
          [],
        ),
        returnValue: _i5.Stream<List<_i2.Habit>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i2.Habit>>.empty(),
      ) as _i5.Stream<List<_i2.Habit>>);

  @override
  _i5.Future<int> deleteHabit(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteHabit,
          [id],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i2.Habit>> getHabitsBySyncStatus({
    required String? syncStatus,
    required bool? isPending,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHabitsBySyncStatus,
          [],
          {
            #syncStatus: syncStatus,
            #isPending: isPending,
          },
        ),
        returnValue: _i5.Future<List<_i2.Habit>>.value(<_i2.Habit>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.Habit>>.value(<_i2.Habit>[]),
      ) as _i5.Future<List<_i2.Habit>>);

  @override
  _i5.Future<void> deleteAllHabits() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllHabits,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<T> createStream<T extends Object>(
          _i4.QueryStreamFetcher<T>? stmt) =>
      (super.noSuchMethod(
        Invocation.method(
          #createStream,
          [stmt],
        ),
        returnValue: _i5.Stream<T>.empty(),
        returnValueForMissingStub: _i5.Stream<T>.empty(),
      ) as _i5.Stream<T>);

  @override
  T alias<T, D>(
    _i3.ResultSetImplementation<T, D>? table,
    String? alias,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #alias,
          [
            table,
            alias,
          ],
        ),
        returnValue: _i8.dummyValue<T>(
          this,
          Invocation.method(
            #alias,
            [
              table,
              alias,
            ],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<T>(
          this,
          Invocation.method(
            #alias,
            [
              table,
              alias,
            ],
          ),
        ),
      ) as T);

  @override
  void markTablesUpdated(Iterable<_i3.TableInfo<_i3.Table, dynamic>>? tables) =>
      super.noSuchMethod(
        Invocation.method(
          #markTablesUpdated,
          [tables],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyUpdates(Set<_i3.TableUpdate>? updates) => super.noSuchMethod(
        Invocation.method(
          #notifyUpdates,
          [updates],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Stream<Set<_i3.TableUpdate>> tableUpdates(
          [_i3.TableUpdateQuery? query = const _i3.TableUpdateQuery.any()]) =>
      (super.noSuchMethod(
        Invocation.method(
          #tableUpdates,
          [query],
        ),
        returnValue: _i5.Stream<Set<_i3.TableUpdate>>.empty(),
        returnValueForMissingStub: _i5.Stream<Set<_i3.TableUpdate>>.empty(),
      ) as _i5.Stream<Set<_i3.TableUpdate>>);

  @override
  _i5.Future<T> doWhenOpened<T>(
          _i5.FutureOr<T> Function(_i3.QueryExecutor)? fn) =>
      (super.noSuchMethod(
        Invocation.method(
          #doWhenOpened,
          [fn],
        ),
        returnValue: _i8.ifNotNull(
              _i8.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #doWhenOpened,
                  [fn],
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(
              this,
              Invocation.method(
                #doWhenOpened,
                [fn],
              ),
            ),
        returnValueForMissingStub: _i8.ifNotNull(
              _i8.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #doWhenOpened,
                  [fn],
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(
              this,
              Invocation.method(
                #doWhenOpened,
                [fn],
              ),
            ),
      ) as _i5.Future<T>);

  @override
  _i3.InsertStatement<T, D> into<T extends _i3.Table, D>(
          _i3.TableInfo<T, D>? table) =>
      (super.noSuchMethod(
        Invocation.method(
          #into,
          [table],
        ),
        returnValue: _FakeInsertStatement_9<T, D>(
          this,
          Invocation.method(
            #into,
            [table],
          ),
        ),
        returnValueForMissingStub: _FakeInsertStatement_9<T, D>(
          this,
          Invocation.method(
            #into,
            [table],
          ),
        ),
      ) as _i3.InsertStatement<T, D>);

  @override
  _i3.UpdateStatement<Tbl, R> update<Tbl extends _i3.Table, R>(
          _i3.TableInfo<Tbl, R>? table) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [table],
        ),
        returnValue: _FakeUpdateStatement_10<Tbl, R>(
          this,
          Invocation.method(
            #update,
            [table],
          ),
        ),
        returnValueForMissingStub: _FakeUpdateStatement_10<Tbl, R>(
          this,
          Invocation.method(
            #update,
            [table],
          ),
        ),
      ) as _i3.UpdateStatement<Tbl, R>);

  @override
  _i3.SimpleSelectStatement<T, R> select<T extends _i3.HasResultSet, R>(
    _i3.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #select,
          [table],
          {#distinct: distinct},
        ),
        returnValue: _FakeSimpleSelectStatement_11<T, R>(
          this,
          Invocation.method(
            #select,
            [table],
            {#distinct: distinct},
          ),
        ),
        returnValueForMissingStub: _FakeSimpleSelectStatement_11<T, R>(
          this,
          Invocation.method(
            #select,
            [table],
            {#distinct: distinct},
          ),
        ),
      ) as _i3.SimpleSelectStatement<T, R>);

  @override
  _i3.JoinedSelectStatement<T, R> selectOnly<T extends _i3.HasResultSet, R>(
    _i3.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectOnly,
          [table],
          {#distinct: distinct},
        ),
        returnValue: _FakeJoinedSelectStatement_12<T, R>(
          this,
          Invocation.method(
            #selectOnly,
            [table],
            {#distinct: distinct},
          ),
        ),
        returnValueForMissingStub: _FakeJoinedSelectStatement_12<T, R>(
          this,
          Invocation.method(
            #selectOnly,
            [table],
            {#distinct: distinct},
          ),
        ),
      ) as _i3.JoinedSelectStatement<T, R>);

  @override
  _i3.BaseSelectStatement<_i3.TypedResult> selectExpressions(
          Iterable<_i3.Expression<Object>>? columns) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectExpressions,
          [columns],
        ),
        returnValue: _FakeBaseSelectStatement_13<_i3.TypedResult>(
          this,
          Invocation.method(
            #selectExpressions,
            [columns],
          ),
        ),
        returnValueForMissingStub: _FakeBaseSelectStatement_13<_i3.TypedResult>(
          this,
          Invocation.method(
            #selectExpressions,
            [columns],
          ),
        ),
      ) as _i3.BaseSelectStatement<_i3.TypedResult>);

  @override
  _i3.DeleteStatement<T, D> delete<T extends _i3.Table, D>(
          _i3.TableInfo<T, D>? table) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
        ),
        returnValue: _FakeDeleteStatement_14<T, D>(
          this,
          Invocation.method(
            #delete,
            [table],
          ),
        ),
        returnValueForMissingStub: _FakeDeleteStatement_14<T, D>(
          this,
          Invocation.method(
            #delete,
            [table],
          ),
        ),
      ) as _i3.DeleteStatement<T, D>);

  @override
  _i5.Future<int> customUpdate(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i3.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #customUpdate,
          [query],
          {
            #variables: variables,
            #updates: updates,
            #updateKind: updateKind,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> customInsert(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? updates,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #customInsert,
          [query],
          {
            #variables: variables,
            #updates: updates,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i3.QueryRow>> customWriteReturning(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i3.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #customWriteReturning,
          [query],
          {
            #variables: variables,
            #updates: updates,
            #updateKind: updateKind,
          },
        ),
        returnValue: _i5.Future<List<_i3.QueryRow>>.value(<_i3.QueryRow>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.QueryRow>>.value(<_i3.QueryRow>[]),
      ) as _i5.Future<List<_i3.QueryRow>>);

  @override
  _i3.Selectable<_i3.QueryRow> customSelect(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #customSelect,
          [query],
          {
            #variables: variables,
            #readsFrom: readsFrom,
          },
        ),
        returnValue: _FakeSelectable_15<_i3.QueryRow>(
          this,
          Invocation.method(
            #customSelect,
            [query],
            {
              #variables: variables,
              #readsFrom: readsFrom,
            },
          ),
        ),
        returnValueForMissingStub: _FakeSelectable_15<_i3.QueryRow>(
          this,
          Invocation.method(
            #customSelect,
            [query],
            {
              #variables: variables,
              #readsFrom: readsFrom,
            },
          ),
        ),
      ) as _i3.Selectable<_i3.QueryRow>);

  @override
  _i3.Selectable<_i3.QueryRow> customSelectQuery(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #customSelectQuery,
          [query],
          {
            #variables: variables,
            #readsFrom: readsFrom,
          },
        ),
        returnValue: _FakeSelectable_15<_i3.QueryRow>(
          this,
          Invocation.method(
            #customSelectQuery,
            [query],
            {
              #variables: variables,
              #readsFrom: readsFrom,
            },
          ),
        ),
        returnValueForMissingStub: _FakeSelectable_15<_i3.QueryRow>(
          this,
          Invocation.method(
            #customSelectQuery,
            [query],
            {
              #variables: variables,
              #readsFrom: readsFrom,
            },
          ),
        ),
      ) as _i3.Selectable<_i3.QueryRow>);

  @override
  _i5.Future<void> customStatement(
    String? statement, [
    List<dynamic>? args,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #customStatement,
          [
            statement,
            args,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<T> transaction<T>(
    _i5.Future<T> Function()? action, {
    bool? requireNew = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
          {#requireNew: requireNew},
        ),
        returnValue: _i8.ifNotNull(
              _i8.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                  {#requireNew: requireNew},
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
                {#requireNew: requireNew},
              ),
            ),
        returnValueForMissingStub: _i8.ifNotNull(
              _i8.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                  {#requireNew: requireNew},
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
                {#requireNew: requireNew},
              ),
            ),
      ) as _i5.Future<T>);

  @override
  _i5.Future<T> exclusively<T>(_i5.Future<T> Function()? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #exclusively,
          [action],
        ),
        returnValue: _i8.ifNotNull(
              _i8.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #exclusively,
                  [action],
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(
              this,
              Invocation.method(
                #exclusively,
                [action],
              ),
            ),
        returnValueForMissingStub: _i8.ifNotNull(
              _i8.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #exclusively,
                  [action],
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(
              this,
              Invocation.method(
                #exclusively,
                [action],
              ),
            ),
      ) as _i5.Future<T>);

  @override
  _i5.Future<void> batch(_i5.FutureOr<void> Function(_i3.Batch)? runInBatch) =>
      (super.noSuchMethod(
        Invocation.method(
          #batch,
          [runInBatch],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<T> runWithInterceptor<T>(
    _i5.Future<T> Function()? action, {
    required _i3.QueryInterceptor? interceptor,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runWithInterceptor,
          [action],
          {#interceptor: interceptor},
        ),
        returnValue: _i8.ifNotNull(
              _i8.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runWithInterceptor,
                  [action],
                  {#interceptor: interceptor},
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(
              this,
              Invocation.method(
                #runWithInterceptor,
                [action],
                {#interceptor: interceptor},
              ),
            ),
        returnValueForMissingStub: _i8.ifNotNull(
              _i8.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runWithInterceptor,
                  [action],
                  {#interceptor: interceptor},
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(
              this,
              Invocation.method(
                #runWithInterceptor,
                [action],
                {#interceptor: interceptor},
              ),
            ),
      ) as _i5.Future<T>);

  @override
  _i3.GenerationContext $write(
    _i3.Component? component, {
    bool? hasMultipleTables,
    int? startIndex,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #$write,
          [component],
          {
            #hasMultipleTables: hasMultipleTables,
            #startIndex: startIndex,
          },
        ),
        returnValue: _FakeGenerationContext_16(
          this,
          Invocation.method(
            #$write,
            [component],
            {
              #hasMultipleTables: hasMultipleTables,
              #startIndex: startIndex,
            },
          ),
        ),
        returnValueForMissingStub: _FakeGenerationContext_16(
          this,
          Invocation.method(
            #$write,
            [component],
            {
              #hasMultipleTables: hasMultipleTables,
              #startIndex: startIndex,
            },
          ),
        ),
      ) as _i3.GenerationContext);

  @override
  _i3.GenerationContext $writeInsertable(
    _i3.TableInfo<_i3.Table, dynamic>? table,
    _i3.Insertable<dynamic>? insertable, {
    int? startIndex,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #$writeInsertable,
          [
            table,
            insertable,
          ],
          {#startIndex: startIndex},
        ),
        returnValue: _FakeGenerationContext_16(
          this,
          Invocation.method(
            #$writeInsertable,
            [
              table,
              insertable,
            ],
            {#startIndex: startIndex},
          ),
        ),
        returnValueForMissingStub: _FakeGenerationContext_16(
          this,
          Invocation.method(
            #$writeInsertable,
            [
              table,
              insertable,
            ],
            {#startIndex: startIndex},
          ),
        ),
      ) as _i3.GenerationContext);

  @override
  String $expandVar(
    int? start,
    int? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #$expandVar,
          [
            start,
            amount,
          ],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #$expandVar,
            [
              start,
              amount,
            ],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #$expandVar,
            [
              start,
              amount,
            ],
          ),
        ),
      ) as String);

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [RemoteHabitDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteHabitDataSource extends _i1.Mock
    implements _i9.RemoteHabitDataSource {
  @override
  _i5.Future<List<_i6.Habit>> getHabits() => (super.noSuchMethod(
        Invocation.method(
          #getHabits,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Habit>>.value(<_i6.Habit>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i6.Habit>>.value(<_i6.Habit>[]),
      ) as _i5.Future<List<_i6.Habit>>);

  @override
  _i5.Future<_i6.Habit> getHabitById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getHabitById,
          [id],
        ),
        returnValue: _i5.Future<_i6.Habit>.value(_FakeHabit_17(
          this,
          Invocation.method(
            #getHabitById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i6.Habit>.value(_FakeHabit_17(
          this,
          Invocation.method(
            #getHabitById,
            [id],
          ),
        )),
      ) as _i5.Future<_i6.Habit>);

  @override
  _i5.Future<void> addHabit(_i6.Habit? habit) => (super.noSuchMethod(
        Invocation.method(
          #addHabit,
          [habit],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateHabit(_i6.Habit? habit) => (super.noSuchMethod(
        Invocation.method(
          #updateHabit,
          [habit],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteHabit(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteHabit,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<List<_i6.Habit>> habitsStream() => (super.noSuchMethod(
        Invocation.method(
          #habitsStream,
          [],
        ),
        returnValue: _i5.Stream<List<_i6.Habit>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i6.Habit>>.empty(),
      ) as _i5.Stream<List<_i6.Habit>>);
}

/// A class which mocks [LocalHabitDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalHabitDataSource extends _i1.Mock
    implements _i10.LocalHabitDataSource {
  @override
  _i5.Future<List<_i6.Habit>> getHabits() => (super.noSuchMethod(
        Invocation.method(
          #getHabits,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Habit>>.value(<_i6.Habit>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i6.Habit>>.value(<_i6.Habit>[]),
      ) as _i5.Future<List<_i6.Habit>>);

  @override
  _i5.Future<_i6.Habit?> getHabitById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getHabitById,
          [id],
        ),
        returnValue: _i5.Future<_i6.Habit?>.value(),
        returnValueForMissingStub: _i5.Future<_i6.Habit?>.value(),
      ) as _i5.Future<_i6.Habit?>);

  @override
  _i5.Future<void> saveHabit(_i6.Habit? habit) => (super.noSuchMethod(
        Invocation.method(
          #saveHabit,
          [habit],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateHabit(_i6.Habit? habit) => (super.noSuchMethod(
        Invocation.method(
          #updateHabit,
          [habit],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteHabit(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteHabit,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<List<_i6.Habit>> habitsStream() => (super.noSuchMethod(
        Invocation.method(
          #habitsStream,
          [],
        ),
        returnValue: _i5.Stream<List<_i6.Habit>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i6.Habit>>.empty(),
      ) as _i5.Stream<List<_i6.Habit>>);

  @override
  _i5.Future<void> saveAllHabits(List<_i6.Habit>? habits) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAllHabits,
          [habits],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> markHabitAsSynced(String? habitId) => (super.noSuchMethod(
        Invocation.method(
          #markHabitAsSynced,
          [habitId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> markHabitAsPendingSync(
    String? habitId,
    _i11.SyncStatus? syncStatus,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markHabitAsPendingSync,
          [
            habitId,
            syncStatus,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.Habit>> getPendingSyncHabits() => (super.noSuchMethod(
        Invocation.method(
          #getPendingSyncHabits,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Habit>>.value(<_i6.Habit>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i6.Habit>>.value(<_i6.Habit>[]),
      ) as _i5.Future<List<_i6.Habit>>);
}

/// A class which mocks [IAppConnect].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockIAppConnect extends _i1.Mock implements _i12.IAppConnect {
  @override
  _i5.Stream<bool> get onConnectChanged => (super.noSuchMethod(
        Invocation.getter(#onConnectChanged),
        returnValue: _i5.Stream<bool>.empty(),
        returnValueForMissingStub: _i5.Stream<bool>.empty(),
      ) as _i5.Stream<bool>);

  @override
  _i5.Future<bool> hasConnect() => (super.noSuchMethod(
        Invocation.method(
          #hasConnect,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [HabitRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHabitRepository extends _i1.Mock implements _i13.HabitRepository {
  @override
  _i5.Future<List<_i6.Habit>> getHabits() => (super.noSuchMethod(
        Invocation.method(
          #getHabits,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Habit>>.value(<_i6.Habit>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i6.Habit>>.value(<_i6.Habit>[]),
      ) as _i5.Future<List<_i6.Habit>>);

  @override
  _i5.Future<void> addHabit(_i6.Habit? habit) => (super.noSuchMethod(
        Invocation.method(
          #addHabit,
          [habit],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateHabit(_i6.Habit? habit) => (super.noSuchMethod(
        Invocation.method(
          #updateHabit,
          [habit],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteHabit(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteHabit,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<List<_i6.Habit>> watchHabits() => (super.noSuchMethod(
        Invocation.method(
          #watchHabits,
          [],
        ),
        returnValue: _i5.Stream<List<_i6.Habit>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i6.Habit>>.empty(),
      ) as _i5.Stream<List<_i6.Habit>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
